import React, { useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { Card, Button, Alert, ProgressBar } from 'react-bootstrap';
import axios from 'axios';
import { URL } from '../domain.ts';

const Test = ({ theme }) => {
    const { id: testId } = useParams();
    const navigate = useNavigate();
    const location = useLocation();
    const testDataFromState = location.state?.testData;

    const [questions, setQuestions] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [selectedAnswer, setSelectedAnswer] = useState(null);
    const [showExplanation, setShowExplanation] = useState(false);
    const [correctCount, setCorrectCount] = useState(0);
    const [finished, setFinished] = useState(false);
    const [resultSent, setResultSent] = useState(false);
    const [blockCompleted, setBlockCompleted] = useState(false);
    const [loading, setLoading] = useState(true);
    const [userId, setUserId] = useState(null);
    const [blockId, setBlockId] = useState(null);

    const isDark = theme === 'dark';
    const cardBg = isDark ? 'bg-dark text-light' : 'bg-light text-dark';

    useEffect(() => {
        const tg = window.Telegram?.WebApp;
        const telegramUser = tg?.initDataUnsafe?.user;
        if (telegramUser?.id) {
            setUserId(telegramUser.id);
        }

        // –ü–æ–ª—É—á–∞–µ–º blockId –∏–∑ sessionStorage, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Lesson
        const storedBlockId = sessionStorage.getItem('currentBlockId');
        if (storedBlockId) {
            setBlockId(storedBlockId);
        }
    }, []);

    useEffect(() => {
        const fetchQuestions = async () => {
            try {
                setLoading(true);

                // If we have the test data from state, use it directly
                if (testDataFromState && testDataFromState.questions) {
                    console.log("Using test data from state:", testDataFromState);
                    setQuestions(testDataFromState.questions);

                    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å testDataFromState, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º blockId –∏–∑ –Ω–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                    if (testDataFromState.blockId) {
                        setBlockId(testDataFromState.blockId);
                    }

                    setLoading(false);
                    return;
                }

                // Otherwise fetch from API
                const { data } = await axios.get(`${URL}/api/Courses/test-block-id`, {
                    params: { testId },
                });

                if (data && data.questions) {
                    setQuestions(data.questions);

                    // –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –µ—Å—Ç—å blockId, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if (data.blockId) {
                        setBlockId(data.blockId);
                    }
                } else {
                    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchQuestions();
    }, [testId, testDataFromState]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞
    const completeBlock = useCallback(async () => {
        if (!userId || !blockId || blockCompleted) return;

        try {
            console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞:", {
                blockId,
                telegramId: userId
            });

            const response = await axios.patch(`${URL}/api/Courses/block-finish`, null, {
                params: { blockId, telegramId: userId }
            });

            if (response.data?.isSuccess) {
                console.log("–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
                setBlockCompleted(true);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–ª–æ–∫–∞:', error);
        }
    }, [userId, blockId, blockCompleted]);

    const sendResult = useCallback(async (result, percentageCorrect) => {
        try {
            if (!userId || resultSent) return;

            console.log("Sending test result:", {
                telegramId: userId,
                testId,
                result,
                percentageIsTrue: percentageCorrect
            });

            // Using the correct endpoint and parameter names based on your API
            await axios.post(`${URL}/api/Courses/test-result`, {
                telegramId: userId,
                testId,
                result,
                percentageIsTrue: percentageCorrect
            });

            setResultSent(true);

            // –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞
            if (result) {
                await completeBlock();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', error);
        }
    }, [resultSent, testId, userId, completeBlock]);

    useEffect(() => {
        if (!finished || !questions.length) return;

        const percentageCorrect = Math.round((correctCount / questions.length) * 100);
        const passed = correctCount > questions.length / 2;

        sendResult(passed, percentageCorrect);
    }, [finished, correctCount, questions.length, sendResult]);

    const currentQuestion = questions[currentIndex];

    const handleAnswer = (answer) => {
        setSelectedAnswer(answer);
        setShowExplanation(true);

        if (answer.isCorrect) {
            setCorrectCount((prev) => prev + 1);
        }
    };

    const handleNext = () => {
        setSelectedAnswer(null);
        setShowExplanation(false);

        if (currentIndex + 1 >= questions.length) {
            setFinished(true);
        } else {
            setCurrentIndex((prev) => prev + 1);
        }
    };

    const handleRestart = () => {
        setCurrentIndex(0);
        setCorrectCount(0);
        setSelectedAnswer(null);
        setShowExplanation(false);
        setFinished(false);
        setResultSent(false);
    };

    if (loading) return <p className="text-center mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</p>;

    if (!questions.length) return <p className="text-center mt-4">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.</p>;

    if (finished) {
        const passed = correctCount > questions.length / 2;
        const percentageCorrect = Math.round((correctCount / questions.length) * 100);

        return (
            <div className="container mt-4 text-center">
                <h2>{passed ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!' : 'ü´∂ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!'}</h2>
                <p>–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correctCount} –∏–∑ {questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentageCorrect}%).</p>

                {passed ? (
                    <Button variant="success" className="m-2" onClick={() => navigate(-1)}>
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫—É
                    </Button>
                ) : (
                    <>
                        <Button variant="warning" className="m-2" onClick={handleRestart}>
                            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç
                        </Button>
                        <Button variant="secondary" className="m-2" onClick={() => navigate(-1)}>
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫—É
                        </Button>
                    </>
                )}
            </div>
        );
    }

    return (
        <div className="container mt-4">
            <Card className={`${cardBg} shadow-sm`}>
                <Card.Body>
                    <Card.Title>{currentQuestion?.title}</Card.Title>

                    <ProgressBar
                        now={(currentIndex / questions.length) * 100}
                        className="mb-3"
                    />

                    {currentQuestion?.answers?.map((ans) => (
                        <Button
                            key={ans.id}
                            variant={
                                !showExplanation
                                    ? 'outline-primary'
                                    : ans.id === selectedAnswer?.id
                                        ? ans.isCorrect
                                            ? 'success'
                                            : 'danger'
                                        : 'outline-secondary'
                            }
                            onClick={() => !showExplanation && handleAnswer(ans)}
                            className="d-block w-100 mb-2"
                            disabled={showExplanation}
                        >
                            {ans.title}
                        </Button>
                    ))}

                    {showExplanation && (
                        <>
                            <Alert
                                variant={selectedAnswer?.isCorrect ? 'success' : 'danger'}
                                className="mt-3"
                            >
                                <strong>
                                    {selectedAnswer?.isCorrect ? '‚úÖ –í–µ—Ä–Ω–æ!' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ.'}
                                </strong>{' '}
                                {selectedAnswer?.explanation}
                            </Alert>

                            <Button
                                variant={isDark ? 'light' : 'primary'}
                                onClick={handleNext}
                                className="mt-3"
                            >
                                {currentIndex + 1 === questions.length
                                    ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
                                    : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'}
                            </Button>
                        </>
                    )}
                </Card.Body>
            </Card>
        </div>
    );
};

export default Test;